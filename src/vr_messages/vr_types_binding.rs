/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self { __IncompleteArrayField(::std::marker::PhantomData, []) }
    #[inline]
    pub fn as_ptr(&self) -> *const T { self as *const _ as *const T }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T { self as *mut _ as *mut T }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &'static [u8; 9usize] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const OS_LOG_ERR: u32 = 3;
pub const OS_LOG_DEBUG: u32 = 7;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const MAX_FILE_NAME: u32 = 512;
pub const THRIFT_BINARY_PROTOCOL_VERSION_1: u32 = 2147549184;
pub const THRIFT_BINARY_PROTOCOL_VERSION_MASK: u32 = 4294901760;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MAX_XML_BUFFER_SIZE: u32 = 256;
pub const MAX_XML_TAG_SIZE: u32 = 128;
pub const MAX_TAG_STACK_SIZE: u32 = 100;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut [::std::os::raw::c_ushort; 3usize]) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(
        __xsubi: *mut [::std::os::raw::c_ushort; 3usize],
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(
        __xsubi: *mut [::std::os::raw::c_ushort; 3usize],
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(
        __seed16v: *mut [::std::os::raw::c_ushort; 3usize],
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut [::std::os::raw::c_ushort; 7usize]);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
extern "C" {
    pub fn drand48_r(
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut [::std::os::raw::c_ushort; 3usize],
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut [::std::os::raw::c_ushort; 3usize],
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut [::std::os::raw::c_ushort; 3usize],
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut [::std::os::raw::c_ushort; 3usize],
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut [::std::os::raw::c_ushort; 7usize],
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(
        __loadavg: *mut [f64; 0usize],
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut [::std::os::raw::c_int; 2usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        __fd: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __gnuc_va_list,
    );
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type ct_uuid_t = [::std::os::raw::c_uchar; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipaddr_s {
    pub iptype: u8,
    pub __bindgen_anon_1: ipaddr_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ipaddr_s__bindgen_ty_1 {
    pub ipv4: in_addr,
    pub ipv6: in6_addr,
    _bindgen_union_align: [u32; 4usize],
}
pub type ipaddr_t = ipaddr_s;
pub const ThriftTransportType_T_TRANSPORT_MEMORY_BUFFER: ThriftTransportType = 1;
pub const ThriftTransportType_T_TRANSPORT_FAKE: ThriftTransportType = 2;
pub const ThriftTransportType_T_TRANSPORT_FILE: ThriftTransportType = 3;
#[doc = " Enumerated definitions of supported transports"]
pub type ThriftTransportType = u32;
#[doc = " Thrift Transport class"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ThriftTransport {
    pub ttype: ThriftTransportType,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            transport: *mut _ThriftTransport,
            buf: *mut ::std::os::raw::c_void,
            len: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            transport: *mut _ThriftTransport,
            buf: *const ::std::os::raw::c_void,
            len: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> u_int8_t,
    >,
}
pub type ThriftTransport = _ThriftTransport;
extern "C" {
    pub fn thrift_transport_get_type() -> ThriftTransportType;
}
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_UNKNOWN: ThriftTransportError = 0;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_HOST: ThriftTransportError = 1;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_SOCKET: ThriftTransportError = 2;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_CONNECT: ThriftTransportError = 3;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_SEND: ThriftTransportError = 4;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_RECEIVE: ThriftTransportError = 5;
pub const ThriftTransportError_THRIFT_TRANSPORT_ERROR_CLOSE: ThriftTransportError = 6;
pub type ThriftTransportError = u32;
#[doc = " ThriftMemoryBuffer instance."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ThriftMemoryBuffer {
    pub tt: ThriftTransport,
    pub buf: *mut u_int8_t,
    pub buf_roffset: u_int32_t,
    pub buf_woffset: u_int32_t,
    pub buf_size: u_int32_t,
    pub owner: u_int8_t,
}
pub type ThriftMemoryBuffer = _ThriftMemoryBuffer;
extern "C" {
    pub fn thrift_memory_buffer_init(
        transport: *mut ThriftMemoryBuffer,
        buf: *mut ::std::os::raw::c_void,
        size: u_int32_t,
    );
}
extern "C" {
    pub fn thrift_memory_buffer_wrote_bytes(
        t: *mut ThriftMemoryBuffer,
        len: u_int32_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = " ThriftFakeTransport instance."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ThriftFakeTransport {
    pub tt: ThriftTransport,
}
pub type ThriftFakeTransport = _ThriftFakeTransport;
extern "C" {
    pub fn thrift_fake_transport_init(transport: *mut ThriftFakeTransport);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = " ThriftFileTransport instance."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ThriftFileTransport {
    pub tt: ThriftTransport,
    pub filename: [::std::os::raw::c_char; 512usize],
    pub fp: *mut FILE,
}
pub type ThriftFileTransport = _ThriftFileTransport;
extern "C" {
    pub fn thrift_file_transport_init(
        t: *mut ThriftFileTransport,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thrift_file_transport_close(ft: *mut ThriftFileTransport);
}
pub const ThriftType_T_STOP: ThriftType = 0;
pub const ThriftType_T_VOID: ThriftType = 1;
pub const ThriftType_T_BOOL: ThriftType = 2;
pub const ThriftType_T_BYTE: ThriftType = 3;
pub const ThriftType_T_I08: ThriftType = 3;
pub const ThriftType_T_I16: ThriftType = 6;
pub const ThriftType_T_I32: ThriftType = 8;
pub const ThriftType_T_U64: ThriftType = 9;
pub const ThriftType_T_I64: ThriftType = 10;
pub const ThriftType_T_DOUBLE: ThriftType = 4;
pub const ThriftType_T_STRING: ThriftType = 11;
pub const ThriftType_T_UTF7: ThriftType = 11;
pub const ThriftType_T_STRUCT: ThriftType = 12;
pub const ThriftType_T_MAP: ThriftType = 13;
pub const ThriftType_T_SET: ThriftType = 14;
pub const ThriftType_T_LIST: ThriftType = 15;
pub const ThriftType_T_UTF8: ThriftType = 16;
pub const ThriftType_T_UTF16: ThriftType = 17;
pub const ThriftType_T_U16: ThriftType = 19;
pub const ThriftType_T_U32: ThriftType = 20;
pub const ThriftType_T_XML: ThriftType = 21;
pub const ThriftType_T_IPV4: ThriftType = 22;
pub const ThriftType_T_UUID: ThriftType = 23;
pub const ThriftType_T_IPADDR: ThriftType = 24;
#[doc = " Enumerated definition of the types that the Thrift protocol supports."]
#[doc = " Take special note of the T_END type which is used specifically to mark"]
#[doc = " the end of a sequence of fields."]
pub type ThriftType = u32;
pub const ThriftMessageType_T_CALL: ThriftMessageType = 1;
pub const ThriftMessageType_T_REPLY: ThriftMessageType = 2;
pub const ThriftMessageType_T_EXCEPTION: ThriftMessageType = 3;
pub const ThriftMessageType_T_ONEWAY: ThriftMessageType = 4;
#[doc = " Enumerated definition of the message types that the Thrift protocol"]
#[doc = " supports."]
pub type ThriftMessageType = u32;
pub const ThriftProtocolType_T_PROTOCOL_BINARY: ThriftProtocolType = 1;
pub const ThriftProtocolType_T_PROTOCOL_XML: ThriftProtocolType = 2;
#[doc = " Enumerated definitions of supported protocols"]
pub type ThriftProtocolType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ThriftProtocol {
    pub ptype: ThriftProtocolType,
    pub transport: *mut ThriftTransport,
    pub write_sandesh_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *const ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_sandesh_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_struct_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *const ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_struct_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_field_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *const ::std::os::raw::c_char,
            field_type: ThriftType,
            field_id: i16,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_field_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_field_stop: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_list_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            element_type: ThriftType,
            size: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_list_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_bool: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: u_int8_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_byte: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: i8,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_i16: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: i16,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_i32: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: i32,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_i64: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: i64,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_u16: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: u_int16_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_u32: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_u64: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: u_int64_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_ipv4: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_ipaddr: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *const ipaddr_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_double: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: f64,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_string: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            str: *const ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_binary: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            buf: *const ::std::os::raw::c_void,
            len: u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_xml: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            str: *const ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_uuid_t: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut ct_uuid_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_sandesh_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *mut *mut ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_sandesh_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_struct_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *mut *mut ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_struct_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_field_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            name: *mut *mut ::std::os::raw::c_char,
            field_type: *mut ThriftType,
            field_id: *mut i16,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_field_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_list_begin: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            element_type: *mut ThriftType,
            size: *mut u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_list_end: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_bool: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut u_int8_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_byte: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut i8,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_i16: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut i16,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_i32: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut i32,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_i64: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut i64,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_u16: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut u_int16_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_u32: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_u64: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut u_int64_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_ipv4: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_ipaddr: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut ipaddr_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_double: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut f64,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_string: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            str: *mut *mut ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_binary: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            buf: *mut *mut ::std::os::raw::c_void,
            len: *mut u_int32_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_xml: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            str: *mut *mut ::std::os::raw::c_char,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_uuid_t: ::std::option::Option<
        unsafe extern "C" fn(
            protocol: *mut _ThriftProtocol,
            value: *mut ct_uuid_t,
            error: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
}
pub type ThriftProtocol = _ThriftProtocol;
extern "C" {
    pub fn thrift_protocol_skip(
        protocol: *mut ThriftProtocol,
        type_: ThriftType,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn thrift_protocol_init(
        protocol: *mut ThriftProtocol,
        ptype: ThriftProtocolType,
        transport: *mut ThriftTransport,
    );
}
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_UNKNOWN: ThriftProtocolError = 0;
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_INVALID_DATA: ThriftProtocolError = 1;
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_NEGATIVE_SIZE: ThriftProtocolError =
    2;
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_SIZE_LIMIT: ThriftProtocolError = 3;
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_BAD_VERSION: ThriftProtocolError = 4;
pub const ThriftProtocolError_THRIFT_PROTOCOL_ERROR_NOT_IMPLEMENTED: ThriftProtocolError =
    5;
pub type ThriftProtocolError = u32;
pub type ThriftBinaryProtocol = ThriftProtocol;
extern "C" {
    pub fn thrift_binary_protocol_init(protocol: *mut ThriftBinaryProtocol);
}
extern "C" {
    pub fn thrift_binary_protocol_skip_from_buffer(
        buf: *mut u8,
        buflen: u32,
        type_: ThriftType,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
pub const tag_type_t_TAG_SANDESH: tag_type_t = 0;
pub const tag_type_t_TAG_FIELD: tag_type_t = 1;
pub const tag_type_t_TAG_LIST: tag_type_t = 2;
pub const tag_type_t_TAG_MAX: tag_type_t = 3;
pub type tag_type_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tag_stack_t {
    pub stack: [[::std::os::raw::c_char; 128usize]; 100usize],
    pub tos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ThriftXMLProtocol {
    pub proto: ThriftProtocol,
    pub tag_stacks: [tag_stack_t; 3usize],
}
extern "C" {
    pub fn thrift_xml_protocol_init(protocol: *mut ThriftProtocol);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sandesh_info_s {
    pub name: *const ::std::os::raw::c_char,
    pub size: u_int32_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ThriftProtocol,
            arg3: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub read_binary_from_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut u8,
            arg3: usize,
            arg4: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ThriftProtocol,
            arg3: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub write_binary_to_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut u8,
            arg3: usize,
            arg4: *mut ::std::os::raw::c_int,
        ) -> i32,
    >,
    pub process:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
pub type sandesh_info_t = sandesh_info_s;
pub type sandesh_find_info_fn = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut sandesh_info_t,
>;
extern "C" {
    pub fn sandesh_find_info(
        infos: *mut sandesh_info_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut sandesh_info_t;
}
extern "C" {
    pub fn sandesh_decode(
        buf: *mut u_int8_t,
        buf_len: u_int32_t,
        sinfo_find_fn: sandesh_find_info_fn,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_encode(
        sandesh: *mut ::std::os::raw::c_void,
        sname: *const ::std::os::raw::c_char,
        sinfo_find_fn: sandesh_find_info_fn,
        buf: *mut u_int8_t,
        buf_len: u_int32_t,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_get_encoded_length(
        sandesh: *mut ::std::os::raw::c_void,
        sname: *const ::std::os::raw::c_char,
        sinfo_find_fn: sandesh_find_info_fn,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
pub const _sandesh_op_SANDESH_OP_ADD: _sandesh_op = 0;
pub const _sandesh_op_SANDESH_OP_GET: _sandesh_op = 1;
pub const _sandesh_op_SANDESH_OP_DEL: _sandesh_op = 2;
pub const _sandesh_op_SANDESH_OP_DUMP: _sandesh_op = 3;
pub const _sandesh_op_SANDESH_OP_RESPONSE: _sandesh_op = 4;
pub const _sandesh_op_SANDESH_OP_RESET: _sandesh_op = 5;
pub type _sandesh_op = u32;
pub use self::_sandesh_op as sandesh_op;
pub const _flow_op_FLOW_OP_FLOW_SET: _flow_op = 0;
pub const _flow_op_FLOW_OP_FLOW_LIST: _flow_op = 1;
pub const _flow_op_FLOW_OP_FLOW_TABLE_GET: _flow_op = 2;
pub type _flow_op = u32;
pub use self::_flow_op as flow_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sandesh_hdr {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub h_id: i32,
    pub __isset_h_id: u_int8_t,
}
pub type sandesh_hdr = _sandesh_hdr;
extern "C" {
    pub fn sandesh_hdr_write(
        wsandesh_hdr: *mut sandesh_hdr,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_hdr_write_binary_to_buffer(
        wsandesh_hdr: *mut sandesh_hdr,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_hdr_read(
        rsandesh_hdr: *mut sandesh_hdr,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_hdr_read_binary_from_buffer(
        rsandesh_hdr: *mut sandesh_hdr,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn sandesh_hdr_free(fsandesh_hdr: *mut sandesh_hdr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_nexthop_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub nhr_type: i8,
    pub __isset_nhr_type: u_int8_t,
    pub nhr_family: i8,
    pub __isset_nhr_family: u_int8_t,
    pub nhr_id: i32,
    pub __isset_nhr_id: u_int8_t,
    pub nhr_rid: i32,
    pub __isset_nhr_rid: u_int8_t,
    pub nhr_encap_oif_id: i32,
    pub __isset_nhr_encap_oif_id: u_int8_t,
    pub nhr_encap_len: i32,
    pub __isset_nhr_encap_len: u_int8_t,
    pub nhr_encap_family: i32,
    pub __isset_nhr_encap_family: u_int8_t,
    pub nhr_vrf: i32,
    pub __isset_nhr_vrf: u_int8_t,
    pub nhr_tun_sip: u32,
    pub __isset_nhr_tun_sip: u_int8_t,
    pub nhr_tun_dip: u32,
    pub __isset_nhr_tun_dip: u_int8_t,
    pub nhr_tun_sport: i16,
    pub __isset_nhr_tun_sport: u_int8_t,
    pub nhr_tun_dport: i16,
    pub __isset_nhr_tun_dport: u_int8_t,
    pub nhr_ref_cnt: i32,
    pub __isset_nhr_ref_cnt: u_int8_t,
    pub nhr_marker: i32,
    pub __isset_nhr_marker: u_int8_t,
    pub nhr_flags: u32,
    pub __isset_nhr_flags: u_int8_t,
    pub nhr_encap: *mut i8,
    pub nhr_encap_size: u_int32_t,
    pub __isset_nhr_encap: u_int8_t,
    pub nhr_nh_list: *mut i32,
    pub nhr_nh_list_size: u_int32_t,
    pub __isset_nhr_nh_list: u_int8_t,
    pub nhr_label_list: *mut i32,
    pub nhr_label_list_size: u_int32_t,
    pub __isset_nhr_label_list: u_int8_t,
    pub nhr_nh_count: i16,
    pub __isset_nhr_nh_count: u_int8_t,
    pub nhr_tun_sip6: *mut i8,
    pub nhr_tun_sip6_size: u_int32_t,
    pub __isset_nhr_tun_sip6: u_int8_t,
    pub nhr_tun_dip6: *mut i8,
    pub nhr_tun_dip6_size: u_int32_t,
    pub __isset_nhr_tun_dip6: u_int8_t,
    pub nhr_ecmp_config_hash: i8,
    pub __isset_nhr_ecmp_config_hash: u_int8_t,
    pub nhr_pbb_mac: *mut i8,
    pub nhr_pbb_mac_size: u_int32_t,
    pub __isset_nhr_pbb_mac: u_int8_t,
    pub nhr_encap_crypt_oif_id: i32,
    pub __isset_nhr_encap_crypt_oif_id: u_int8_t,
    pub nhr_crypt_traffic: i32,
    pub __isset_nhr_crypt_traffic: u_int8_t,
    pub nhr_crypt_path_available: i32,
    pub __isset_nhr_crypt_path_available: u_int8_t,
    pub nhr_rw_dst_mac: *mut i8,
    pub nhr_rw_dst_mac_size: u_int32_t,
    pub __isset_nhr_rw_dst_mac: u_int8_t,
    pub nhr_transport_label: u32,
    pub __isset_nhr_transport_label: u_int8_t,
}
pub type vr_nexthop_req = _vr_nexthop_req;
extern "C" {
    pub fn vr_nexthop_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_nexthop_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_nexthop_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_nexthop_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_nexthop_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_nexthop_req_process(pvr_nexthop_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_interface_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vifr_core: u32,
    pub __isset_vifr_core: u_int8_t,
    pub vifr_type: i32,
    pub __isset_vifr_type: u_int8_t,
    pub vifr_flags: i32,
    pub __isset_vifr_flags: u_int8_t,
    pub vifr_vrf: i32,
    pub __isset_vifr_vrf: u_int8_t,
    pub vifr_idx: i32,
    pub __isset_vifr_idx: u_int8_t,
    pub vifr_rid: i32,
    pub __isset_vifr_rid: u_int8_t,
    pub vifr_os_idx: i32,
    pub __isset_vifr_os_idx: u_int8_t,
    pub vifr_mtu: i32,
    pub __isset_vifr_mtu: u_int8_t,
    pub vifr_name: *mut ::std::os::raw::c_char,
    pub __isset_vifr_name: u_int8_t,
    pub vifr_ibytes: i64,
    pub __isset_vifr_ibytes: u_int8_t,
    pub vifr_ipackets: i64,
    pub __isset_vifr_ipackets: u_int8_t,
    pub vifr_ierrors: i64,
    pub __isset_vifr_ierrors: u_int8_t,
    pub vifr_obytes: i64,
    pub __isset_vifr_obytes: u_int8_t,
    pub vifr_opackets: i64,
    pub __isset_vifr_opackets: u_int8_t,
    pub vifr_oerrors: i64,
    pub __isset_vifr_oerrors: u_int8_t,
    pub vifr_queue_ipackets: i64,
    pub __isset_vifr_queue_ipackets: u_int8_t,
    pub vifr_queue_ierrors: i64,
    pub __isset_vifr_queue_ierrors: u_int8_t,
    pub vifr_queue_ierrors_to_lcore: *mut i64,
    pub vifr_queue_ierrors_to_lcore_size: u_int32_t,
    pub __isset_vifr_queue_ierrors_to_lcore: u_int8_t,
    pub vifr_queue_opackets: i64,
    pub __isset_vifr_queue_opackets: u_int8_t,
    pub vifr_queue_oerrors: i64,
    pub __isset_vifr_queue_oerrors: u_int8_t,
    pub vifr_port_ipackets: i64,
    pub __isset_vifr_port_ipackets: u_int8_t,
    pub vifr_port_ierrors: i64,
    pub __isset_vifr_port_ierrors: u_int8_t,
    pub vifr_port_isyscalls: i64,
    pub __isset_vifr_port_isyscalls: u_int8_t,
    pub vifr_port_inombufs: i64,
    pub __isset_vifr_port_inombufs: u_int8_t,
    pub vifr_port_opackets: i64,
    pub __isset_vifr_port_opackets: u_int8_t,
    pub vifr_port_oerrors: i64,
    pub __isset_vifr_port_oerrors: u_int8_t,
    pub vifr_port_osyscalls: i64,
    pub __isset_vifr_port_osyscalls: u_int8_t,
    pub vifr_dev_ibytes: i64,
    pub __isset_vifr_dev_ibytes: u_int8_t,
    pub vifr_dev_ipackets: i64,
    pub __isset_vifr_dev_ipackets: u_int8_t,
    pub vifr_dev_ierrors: i64,
    pub __isset_vifr_dev_ierrors: u_int8_t,
    pub vifr_dev_inombufs: i64,
    pub __isset_vifr_dev_inombufs: u_int8_t,
    pub vifr_dev_obytes: i64,
    pub __isset_vifr_dev_obytes: u_int8_t,
    pub vifr_dev_opackets: i64,
    pub __isset_vifr_dev_opackets: u_int8_t,
    pub vifr_dev_oerrors: i64,
    pub __isset_vifr_dev_oerrors: u_int8_t,
    pub vifr_ref_cnt: i32,
    pub __isset_vifr_ref_cnt: u_int8_t,
    pub vifr_marker: i32,
    pub __isset_vifr_marker: u_int8_t,
    pub vifr_mac: *mut i8,
    pub vifr_mac_size: u_int32_t,
    pub __isset_vifr_mac: u_int8_t,
    pub vifr_ip: u32,
    pub __isset_vifr_ip: u_int8_t,
    pub vifr_ip6_u: u64,
    pub __isset_vifr_ip6_u: u_int8_t,
    pub vifr_ip6_l: u64,
    pub __isset_vifr_ip6_l: u_int8_t,
    pub vifr_context: i32,
    pub __isset_vifr_context: u_int8_t,
    pub vifr_mir_id: i16,
    pub __isset_vifr_mir_id: u_int8_t,
    pub vifr_speed: i32,
    pub __isset_vifr_speed: u_int8_t,
    pub vifr_duplex: i32,
    pub __isset_vifr_duplex: u_int8_t,
    pub vifr_vlan_id: i16,
    pub __isset_vifr_vlan_id: u_int8_t,
    pub vifr_parent_vif_idx: i32,
    pub __isset_vifr_parent_vif_idx: u_int8_t,
    pub vifr_nh_id: i32,
    pub __isset_vifr_nh_id: u_int8_t,
    pub vifr_cross_connect_idx: i32,
    pub __isset_vifr_cross_connect_idx: u_int8_t,
    pub vifr_src_mac: *mut i8,
    pub vifr_src_mac_size: u_int32_t,
    pub __isset_vifr_src_mac: u_int8_t,
    pub vifr_bridge_idx: *mut i32,
    pub vifr_bridge_idx_size: u_int32_t,
    pub __isset_vifr_bridge_idx: u_int8_t,
    pub vifr_ovlan_id: i16,
    pub __isset_vifr_ovlan_id: u_int8_t,
    pub vifr_transport: i8,
    pub __isset_vifr_transport: u_int8_t,
    pub vifr_fat_flow_protocol_port: *mut i32,
    pub vifr_fat_flow_protocol_port_size: u_int32_t,
    pub __isset_vifr_fat_flow_protocol_port: u_int8_t,
    pub vifr_qos_map_index: i16,
    pub __isset_vifr_qos_map_index: u_int8_t,
    pub vifr_in_mirror_md: *mut i8,
    pub vifr_in_mirror_md_size: u_int32_t,
    pub __isset_vifr_in_mirror_md: u_int8_t,
    pub vifr_out_mirror_md: *mut i8,
    pub vifr_out_mirror_md_size: u_int32_t,
    pub __isset_vifr_out_mirror_md: u_int8_t,
    pub vifr_dpackets: u64,
    pub __isset_vifr_dpackets: u_int8_t,
    pub vifr_hw_queues: *mut i16,
    pub vifr_hw_queues_size: u_int32_t,
    pub __isset_vifr_hw_queues: u_int8_t,
    pub vifr_isid: u32,
    pub __isset_vifr_isid: u_int8_t,
    pub vifr_pbb_mac: *mut i8,
    pub vifr_pbb_mac_size: u_int32_t,
    pub __isset_vifr_pbb_mac: u_int8_t,
    pub vifr_vhostuser_mode: i8,
    pub __isset_vifr_vhostuser_mode: u_int8_t,
    pub vifr_mcast_vrf: i32,
    pub __isset_vifr_mcast_vrf: u_int8_t,
    pub vifr_if_guid: *mut i8,
    pub vifr_if_guid_size: u_int32_t,
    pub __isset_vifr_if_guid: u_int8_t,
    pub vifr_fat_flow_exclude_ip_list: *mut u64,
    pub vifr_fat_flow_exclude_ip_list_size: u_int32_t,
    pub __isset_vifr_fat_flow_exclude_ip_list: u_int8_t,
    pub vifr_fat_flow_exclude_ip6_u_list: *mut u64,
    pub vifr_fat_flow_exclude_ip6_u_list_size: u_int32_t,
    pub __isset_vifr_fat_flow_exclude_ip6_u_list: u_int8_t,
    pub vifr_fat_flow_exclude_ip6_l_list: *mut u64,
    pub vifr_fat_flow_exclude_ip6_l_list_size: u_int32_t,
    pub __isset_vifr_fat_flow_exclude_ip6_l_list: u_int8_t,
    pub vifr_fat_flow_exclude_ip6_plen_list: *mut u16,
    pub vifr_fat_flow_exclude_ip6_plen_list_size: u_int32_t,
    pub __isset_vifr_fat_flow_exclude_ip6_plen_list: u_int8_t,
    pub vifr_fat_flow_src_prefix_h: *mut u64,
    pub vifr_fat_flow_src_prefix_h_size: u_int32_t,
    pub __isset_vifr_fat_flow_src_prefix_h: u_int8_t,
    pub vifr_fat_flow_src_prefix_l: *mut u64,
    pub vifr_fat_flow_src_prefix_l_size: u_int32_t,
    pub __isset_vifr_fat_flow_src_prefix_l: u_int8_t,
    pub vifr_fat_flow_src_prefix_mask: *mut i8,
    pub vifr_fat_flow_src_prefix_mask_size: u_int32_t,
    pub __isset_vifr_fat_flow_src_prefix_mask: u_int8_t,
    pub vifr_fat_flow_src_aggregate_plen: *mut i8,
    pub vifr_fat_flow_src_aggregate_plen_size: u_int32_t,
    pub __isset_vifr_fat_flow_src_aggregate_plen: u_int8_t,
    pub vifr_fat_flow_dst_prefix_h: *mut u64,
    pub vifr_fat_flow_dst_prefix_h_size: u_int32_t,
    pub __isset_vifr_fat_flow_dst_prefix_h: u_int8_t,
    pub vifr_fat_flow_dst_prefix_l: *mut u64,
    pub vifr_fat_flow_dst_prefix_l_size: u_int32_t,
    pub __isset_vifr_fat_flow_dst_prefix_l: u_int8_t,
    pub vifr_fat_flow_dst_prefix_mask: *mut i8,
    pub vifr_fat_flow_dst_prefix_mask_size: u_int32_t,
    pub __isset_vifr_fat_flow_dst_prefix_mask: u_int8_t,
    pub vifr_fat_flow_dst_aggregate_plen: *mut i8,
    pub vifr_fat_flow_dst_aggregate_plen_size: u_int32_t,
    pub __isset_vifr_fat_flow_dst_aggregate_plen: u_int8_t,
    pub vifr_intf_status: i8,
    pub __isset_vifr_intf_status: u_int8_t,
    pub vifr_fab_name: *mut i8,
    pub vifr_fab_name_size: u_int32_t,
    pub __isset_vifr_fab_name: u_int8_t,
    pub vifr_fab_drv_name: *mut i8,
    pub vifr_fab_drv_name_size: u_int32_t,
    pub __isset_vifr_fab_drv_name: u_int8_t,
    pub vifr_num_bond_slave: i8,
    pub __isset_vifr_num_bond_slave: u_int8_t,
    pub vifr_bond_slave_name: *mut i8,
    pub vifr_bond_slave_name_size: u_int32_t,
    pub __isset_vifr_bond_slave_name: u_int8_t,
    pub vifr_bond_slave_drv_name: *mut i8,
    pub vifr_bond_slave_drv_name_size: u_int32_t,
    pub __isset_vifr_bond_slave_drv_name: u_int8_t,
    pub vifr_vlan_tag: u32,
    pub __isset_vifr_vlan_tag: u_int8_t,
    pub vifr_vlan_name: *mut i8,
    pub vifr_vlan_name_size: u_int32_t,
    pub __isset_vifr_vlan_name: u_int8_t,
}
pub type vr_interface_req = _vr_interface_req;
extern "C" {
    pub fn vr_interface_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_interface_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_interface_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_interface_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_interface_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_interface_req_process(pvr_interface_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_vxlan_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vxlanr_rid: i16,
    pub __isset_vxlanr_rid: u_int8_t,
    pub vxlanr_vnid: i32,
    pub __isset_vxlanr_vnid: u_int8_t,
    pub vxlanr_nhid: i32,
    pub __isset_vxlanr_nhid: u_int8_t,
}
pub type vr_vxlan_req = _vr_vxlan_req;
extern "C" {
    pub fn vr_vxlan_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vxlan_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vxlan_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vxlan_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vxlan_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_vxlan_req_process(pvr_vxlan_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_route_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub rtr_vrf_id: i32,
    pub __isset_rtr_vrf_id: u_int8_t,
    pub rtr_family: i32,
    pub __isset_rtr_family: u_int8_t,
    pub rtr_prefix: *mut i8,
    pub rtr_prefix_size: u_int32_t,
    pub __isset_rtr_prefix: u_int8_t,
    pub rtr_prefix_len: i32,
    pub __isset_rtr_prefix_len: u_int8_t,
    pub rtr_rid: i16,
    pub __isset_rtr_rid: u_int8_t,
    pub rtr_label_flags: i16,
    pub __isset_rtr_label_flags: u_int8_t,
    pub rtr_label: i32,
    pub __isset_rtr_label: u_int8_t,
    pub rtr_nh_id: i32,
    pub __isset_rtr_nh_id: u_int8_t,
    pub rtr_marker: *mut i8,
    pub rtr_marker_size: u_int32_t,
    pub __isset_rtr_marker: u_int8_t,
    pub rtr_marker_plen: i32,
    pub __isset_rtr_marker_plen: u_int8_t,
    pub rtr_mac: *mut i8,
    pub rtr_mac_size: u_int32_t,
    pub __isset_rtr_mac: u_int8_t,
    pub rtr_replace_plen: i32,
    pub __isset_rtr_replace_plen: u_int8_t,
    pub rtr_index: i32,
    pub __isset_rtr_index: u_int8_t,
}
pub type vr_route_req = _vr_route_req;
extern "C" {
    pub fn vr_route_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_route_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_route_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_route_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_route_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_route_req_process(pvr_route_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_mpls_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub mr_label: i32,
    pub __isset_mr_label: u_int8_t,
    pub mr_rid: i16,
    pub __isset_mr_rid: u_int8_t,
    pub mr_nhid: i32,
    pub __isset_mr_nhid: u_int8_t,
    pub mr_marker: i32,
    pub __isset_mr_marker: u_int8_t,
}
pub type vr_mpls_req = _vr_mpls_req;
extern "C" {
    pub fn vr_mpls_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mpls_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mpls_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mpls_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mpls_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_mpls_req_process(pvr_mpls_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_mirror_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub mirr_index: i16,
    pub __isset_mirr_index: u_int8_t,
    pub mirr_rid: i16,
    pub __isset_mirr_rid: u_int8_t,
    pub mirr_nhid: i32,
    pub __isset_mirr_nhid: u_int8_t,
    pub mirr_users: i32,
    pub __isset_mirr_users: u_int8_t,
    pub mirr_flags: i32,
    pub __isset_mirr_flags: u_int8_t,
    pub mirr_marker: i32,
    pub __isset_mirr_marker: u_int8_t,
    pub mirr_vni: i32,
    pub __isset_mirr_vni: u_int8_t,
    pub mirr_vlan: i16,
    pub __isset_mirr_vlan: u_int8_t,
}
pub type vr_mirror_req = _vr_mirror_req;
extern "C" {
    pub fn vr_mirror_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mirror_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mirror_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mirror_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mirror_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_mirror_req_process(pvr_mirror_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_vrf_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vrf_rid: i16,
    pub __isset_vrf_rid: u_int8_t,
    pub vrf_idx: i32,
    pub __isset_vrf_idx: u_int8_t,
    pub vrf_flags: i32,
    pub __isset_vrf_flags: u_int8_t,
    pub vrf_hbfl_vif_idx: i32,
    pub __isset_vrf_hbfl_vif_idx: u_int8_t,
    pub vrf_hbfr_vif_idx: i32,
    pub __isset_vrf_hbfr_vif_idx: u_int8_t,
    pub vrf_marker: i32,
    pub __isset_vrf_marker: u_int8_t,
}
pub type vr_vrf_req = _vr_vrf_req;
extern "C" {
    pub fn vr_vrf_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_vrf_req_process(pvr_vrf_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_flow_req {
    pub fr_op: flow_op,
    pub __isset_fr_op: u_int8_t,
    pub fr_rid: i16,
    pub __isset_fr_rid: u_int8_t,
    pub fr_index: i32,
    pub __isset_fr_index: u_int8_t,
    pub fr_action: i16,
    pub __isset_fr_action: u_int8_t,
    pub fr_flags: i16,
    pub __isset_fr_flags: u_int8_t,
    pub fr_rindex: i32,
    pub __isset_fr_rindex: u_int8_t,
    pub fr_family: i32,
    pub __isset_fr_family: u_int8_t,
    pub fr_flow_sip_u: u64,
    pub __isset_fr_flow_sip_u: u_int8_t,
    pub fr_flow_sip_l: u64,
    pub __isset_fr_flow_sip_l: u_int8_t,
    pub fr_flow_dip_u: u64,
    pub __isset_fr_flow_dip_u: u_int8_t,
    pub fr_flow_dip_l: u64,
    pub __isset_fr_flow_dip_l: u_int8_t,
    pub fr_flow_sport: u16,
    pub __isset_fr_flow_sport: u_int8_t,
    pub fr_flow_dport: u16,
    pub __isset_fr_flow_dport: u_int8_t,
    pub fr_flow_proto: i8,
    pub __isset_fr_flow_proto: u_int8_t,
    pub fr_flow_vrf: u16,
    pub __isset_fr_flow_vrf: u_int8_t,
    pub fr_flow_dvrf: u16,
    pub __isset_fr_flow_dvrf: u_int8_t,
    pub fr_mir_id: u16,
    pub __isset_fr_mir_id: u_int8_t,
    pub fr_sec_mir_id: u16,
    pub __isset_fr_sec_mir_id: u_int8_t,
    pub fr_mir_sip: u32,
    pub __isset_fr_mir_sip: u_int8_t,
    pub fr_mir_sport: u16,
    pub __isset_fr_mir_sport: u_int8_t,
    pub fr_pcap_meta_data: *mut i8,
    pub fr_pcap_meta_data_size: u_int32_t,
    pub __isset_fr_pcap_meta_data: u_int8_t,
    pub fr_mir_vrf: u16,
    pub __isset_fr_mir_vrf: u_int8_t,
    pub fr_ecmp_nh_index: u32,
    pub __isset_fr_ecmp_nh_index: u_int8_t,
    pub fr_src_nh_index: u32,
    pub __isset_fr_src_nh_index: u_int8_t,
    pub fr_flow_nh_id: u32,
    pub __isset_fr_flow_nh_id: u_int8_t,
    pub fr_drop_reason: u16,
    pub __isset_fr_drop_reason: u_int8_t,
    pub fr_gen_id: i8,
    pub __isset_fr_gen_id: u_int8_t,
    pub fr_rflow_sip_u: u64,
    pub __isset_fr_rflow_sip_u: u_int8_t,
    pub fr_rflow_sip_l: u64,
    pub __isset_fr_rflow_sip_l: u_int8_t,
    pub fr_rflow_dip_u: u64,
    pub __isset_fr_rflow_dip_u: u_int8_t,
    pub fr_rflow_dip_l: u64,
    pub __isset_fr_rflow_dip_l: u_int8_t,
    pub fr_rflow_nh_id: u32,
    pub __isset_fr_rflow_nh_id: u_int8_t,
    pub fr_rflow_sport: u16,
    pub __isset_fr_rflow_sport: u_int8_t,
    pub fr_rflow_dport: u16,
    pub __isset_fr_rflow_dport: u_int8_t,
    pub fr_qos_id: u16,
    pub __isset_fr_qos_id: u_int8_t,
    pub fr_ttl: i8,
    pub __isset_fr_ttl: u_int8_t,
    pub fr_extflags: i16,
    pub __isset_fr_extflags: u_int8_t,
    pub fr_flags1: i16,
    pub __isset_fr_flags1: u_int8_t,
}
pub type vr_flow_req = _vr_flow_req;
extern "C" {
    pub fn vr_flow_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_flow_req_process(pvr_flow_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_vrf_assign_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub var_rid: i16,
    pub __isset_var_rid: u_int8_t,
    pub var_vif_index: i16,
    pub __isset_var_vif_index: u_int8_t,
    pub var_vif_vrf: i32,
    pub __isset_var_vif_vrf: u_int8_t,
    pub var_vlan_id: i16,
    pub __isset_var_vlan_id: u_int8_t,
    pub var_marker: i16,
    pub __isset_var_marker: u_int8_t,
    pub var_nh_id: i32,
    pub __isset_var_nh_id: u_int8_t,
}
pub type vr_vrf_assign_req = _vr_vrf_assign_req;
extern "C" {
    pub fn vr_vrf_assign_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_assign_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_assign_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_assign_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_assign_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_vrf_assign_req_process(pvr_vrf_assign_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_vrf_stats_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vsr_rid: i16,
    pub __isset_vsr_rid: u_int8_t,
    pub vsr_family: i16,
    pub __isset_vsr_family: u_int8_t,
    pub vsr_type: i16,
    pub __isset_vsr_type: u_int8_t,
    pub vsr_vrf: i32,
    pub __isset_vsr_vrf: u_int8_t,
    pub vsr_discards: i64,
    pub __isset_vsr_discards: u_int8_t,
    pub vsr_resolves: i64,
    pub __isset_vsr_resolves: u_int8_t,
    pub vsr_receives: i64,
    pub __isset_vsr_receives: u_int8_t,
    pub vsr_ecmp_composites: i64,
    pub __isset_vsr_ecmp_composites: u_int8_t,
    pub vsr_l2_mcast_composites: i64,
    pub __isset_vsr_l2_mcast_composites: u_int8_t,
    pub vsr_fabric_composites: i64,
    pub __isset_vsr_fabric_composites: u_int8_t,
    pub vsr_udp_tunnels: i64,
    pub __isset_vsr_udp_tunnels: u_int8_t,
    pub vsr_udp_mpls_tunnels: i64,
    pub __isset_vsr_udp_mpls_tunnels: u_int8_t,
    pub vsr_gre_mpls_tunnels: i64,
    pub __isset_vsr_gre_mpls_tunnels: u_int8_t,
    pub vsr_l2_encaps: i64,
    pub __isset_vsr_l2_encaps: u_int8_t,
    pub vsr_encaps: i64,
    pub __isset_vsr_encaps: u_int8_t,
    pub vsr_marker: i16,
    pub __isset_vsr_marker: u_int8_t,
    pub vsr_gros: i64,
    pub __isset_vsr_gros: u_int8_t,
    pub vsr_diags: i64,
    pub __isset_vsr_diags: u_int8_t,
    pub vsr_encap_composites: i64,
    pub __isset_vsr_encap_composites: u_int8_t,
    pub vsr_evpn_composites: i64,
    pub __isset_vsr_evpn_composites: u_int8_t,
    pub vsr_vrf_translates: i64,
    pub __isset_vsr_vrf_translates: u_int8_t,
    pub vsr_vxlan_tunnels: i64,
    pub __isset_vsr_vxlan_tunnels: u_int8_t,
    pub vsr_arp_virtual_proxy: i64,
    pub __isset_vsr_arp_virtual_proxy: u_int8_t,
    pub vsr_arp_virtual_stitch: i64,
    pub __isset_vsr_arp_virtual_stitch: u_int8_t,
    pub vsr_arp_virtual_flood: i64,
    pub __isset_vsr_arp_virtual_flood: u_int8_t,
    pub vsr_arp_physical_stitch: i64,
    pub __isset_vsr_arp_physical_stitch: u_int8_t,
    pub vsr_arp_tor_proxy: i64,
    pub __isset_vsr_arp_tor_proxy: u_int8_t,
    pub vsr_arp_physical_flood: i64,
    pub __isset_vsr_arp_physical_flood: u_int8_t,
    pub vsr_l2_receives: i64,
    pub __isset_vsr_l2_receives: u_int8_t,
    pub vsr_uuc_floods: i64,
    pub __isset_vsr_uuc_floods: u_int8_t,
    pub vsr_pbb_tunnels: i64,
    pub __isset_vsr_pbb_tunnels: u_int8_t,
    pub vsr_udp_mpls_over_mpls_tunnels: i64,
    pub __isset_vsr_udp_mpls_over_mpls_tunnels: u_int8_t,
}
pub type vr_vrf_stats_req = _vr_vrf_stats_req;
extern "C" {
    pub fn vr_vrf_stats_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_stats_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_stats_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_stats_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_vrf_stats_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_vrf_stats_req_process(pvr_vrf_stats_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_response {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub resp_code: i32,
    pub __isset_resp_code: u_int8_t,
}
pub type vr_response = _vr_response;
extern "C" {
    pub fn vr_response_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_response_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_response_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_response_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_response_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_response_process(pvr_response: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vrouter_ops {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vo_rid: i32,
    pub __isset_vo_rid: u_int8_t,
    pub vo_mpls_labels: i32,
    pub __isset_vo_mpls_labels: u_int8_t,
    pub vo_nexthops: i32,
    pub __isset_vo_nexthops: u_int8_t,
    pub vo_bridge_entries: i32,
    pub __isset_vo_bridge_entries: u_int8_t,
    pub vo_oflow_bridge_entries: i32,
    pub __isset_vo_oflow_bridge_entries: u_int8_t,
    pub vo_flow_entries: i32,
    pub __isset_vo_flow_entries: u_int8_t,
    pub vo_oflow_entries: i32,
    pub __isset_vo_oflow_entries: u_int8_t,
    pub vo_interfaces: i32,
    pub __isset_vo_interfaces: u_int8_t,
    pub vo_mirror_entries: i32,
    pub __isset_vo_mirror_entries: u_int8_t,
    pub vo_vrfs: i32,
    pub __isset_vo_vrfs: u_int8_t,
    pub vo_build_info: *mut ::std::os::raw::c_char,
    pub __isset_vo_build_info: u_int8_t,
    pub vo_log_level: u32,
    pub __isset_vo_log_level: u_int8_t,
    pub vo_log_type_enable: *mut i32,
    pub vo_log_type_enable_size: u_int32_t,
    pub __isset_vo_log_type_enable: u_int8_t,
    pub vo_log_type_disable: *mut i32,
    pub vo_log_type_disable_size: u_int32_t,
    pub __isset_vo_log_type_disable: u_int8_t,
    pub vo_perfr: i32,
    pub __isset_vo_perfr: u_int8_t,
    pub vo_perfs: i32,
    pub __isset_vo_perfs: u_int8_t,
    pub vo_from_vm_mss_adj: i32,
    pub __isset_vo_from_vm_mss_adj: u_int8_t,
    pub vo_to_vm_mss_adj: i32,
    pub __isset_vo_to_vm_mss_adj: u_int8_t,
    pub vo_perfr1: i32,
    pub __isset_vo_perfr1: u_int8_t,
    pub vo_perfr2: i32,
    pub __isset_vo_perfr2: u_int8_t,
    pub vo_perfr3: i32,
    pub __isset_vo_perfr3: u_int8_t,
    pub vo_perfp: i32,
    pub __isset_vo_perfp: u_int8_t,
    pub vo_perfq1: i32,
    pub __isset_vo_perfq1: u_int8_t,
    pub vo_perfq2: i32,
    pub __isset_vo_perfq2: u_int8_t,
    pub vo_perfq3: i32,
    pub __isset_vo_perfq3: u_int8_t,
    pub vo_udp_coff: i32,
    pub __isset_vo_udp_coff: u_int8_t,
    pub vo_flow_hold_limit: i32,
    pub __isset_vo_flow_hold_limit: u_int8_t,
    pub vo_mudp: i32,
    pub __isset_vo_mudp: u_int8_t,
    pub vo_flow_used_entries: u32,
    pub __isset_vo_flow_used_entries: u_int8_t,
    pub vo_flow_used_oentries: u32,
    pub __isset_vo_flow_used_oentries: u_int8_t,
    pub vo_bridge_used_entries: u32,
    pub __isset_vo_bridge_used_entries: u_int8_t,
    pub vo_bridge_used_oentries: u32,
    pub __isset_vo_bridge_used_oentries: u_int8_t,
    pub vo_burst_tokens: i32,
    pub __isset_vo_burst_tokens: u_int8_t,
    pub vo_burst_interval: i32,
    pub __isset_vo_burst_interval: u_int8_t,
    pub vo_burst_step: i32,
    pub __isset_vo_burst_step: u_int8_t,
    pub vo_memory_alloc_checks: i32,
    pub __isset_vo_memory_alloc_checks: u_int8_t,
    pub vo_priority_tagging: u32,
    pub __isset_vo_priority_tagging: u_int8_t,
    pub vo_vif_bridge_entries: i32,
    pub __isset_vo_vif_bridge_entries: u_int8_t,
    pub vo_vif_oflow_bridge_entries: i32,
    pub __isset_vo_vif_oflow_bridge_entries: u_int8_t,
    pub vo_packet_dump: i32,
    pub __isset_vo_packet_dump: u_int8_t,
    pub vo_pkt_droplog_bufsz: i32,
    pub __isset_vo_pkt_droplog_bufsz: u_int8_t,
    pub vo_pkt_droplog_buf_en: i8,
    pub __isset_vo_pkt_droplog_buf_en: u_int8_t,
    pub vo_pkt_droplog_en: i8,
    pub __isset_vo_pkt_droplog_en: u_int8_t,
    pub vo_pkt_droplog_min_en: i8,
    pub __isset_vo_pkt_droplog_min_en: u_int8_t,
    pub vo_close_flow_on_tcp_rst: i8,
    pub __isset_vo_close_flow_on_tcp_rst: u_int8_t,
}
pub type vrouter_ops = _vrouter_ops;
extern "C" {
    pub fn vrouter_ops_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vrouter_ops_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vrouter_ops_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vrouter_ops_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vrouter_ops_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vrouter_ops_process(pvrouter_ops: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_mem_stats_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vms_rid: i16,
    pub __isset_vms_rid: u_int8_t,
    pub vms_alloced: i64,
    pub __isset_vms_alloced: u_int8_t,
    pub vms_freed: i64,
    pub __isset_vms_freed: u_int8_t,
    pub vms_assembler_table_object: i64,
    pub __isset_vms_assembler_table_object: u_int8_t,
    pub vms_bridge_mac_object: i64,
    pub __isset_vms_bridge_mac_object: u_int8_t,
    pub vms_btable_object: i64,
    pub __isset_vms_btable_object: u_int8_t,
    pub vms_build_info_object: i64,
    pub __isset_vms_build_info_object: u_int8_t,
    pub vms_defer_object: i64,
    pub __isset_vms_defer_object: u_int8_t,
    pub vms_drop_stats_object: i64,
    pub __isset_vms_drop_stats_object: u_int8_t,
    pub vms_drop_stats_req_object: i64,
    pub __isset_vms_drop_stats_req_object: u_int8_t,
    pub vms_flow_queue_object: i64,
    pub __isset_vms_flow_queue_object: u_int8_t,
    pub vms_flow_req_object: i64,
    pub __isset_vms_flow_req_object: u_int8_t,
    pub vms_flow_req_path_object: i64,
    pub __isset_vms_flow_req_path_object: u_int8_t,
    pub vms_flow_hold_stat_object: i64,
    pub __isset_vms_flow_hold_stat_object: u_int8_t,
    pub vms_flow_link_local_object: i64,
    pub __isset_vms_flow_link_local_object: u_int8_t,
    pub vms_flow_metadata_object: i64,
    pub __isset_vms_flow_metadata_object: u_int8_t,
    pub vms_flow_table_data_object: i64,
    pub __isset_vms_flow_table_data_object: u_int8_t,
    pub vms_flow_table_info_object: i64,
    pub __isset_vms_flow_table_info_object: u_int8_t,
    pub vms_fragment_object: i64,
    pub __isset_vms_fragment_object: u_int8_t,
    pub vms_fragment_queue_object: i64,
    pub __isset_vms_fragment_queue_object: u_int8_t,
    pub vms_fragment_queue_element_object: i64,
    pub __isset_vms_fragment_queue_element_object: u_int8_t,
    pub vms_fragment_scanner_object: i64,
    pub __isset_vms_fragment_scanner_object: u_int8_t,
    pub vms_hpacket_pool_object: i64,
    pub __isset_vms_hpacket_pool_object: u_int8_t,
    pub vms_htable_object: i64,
    pub __isset_vms_htable_object: u_int8_t,
    pub vms_interface_object: i64,
    pub __isset_vms_interface_object: u_int8_t,
    pub vms_interface_mac_object: i64,
    pub __isset_vms_interface_mac_object: u_int8_t,
    pub vms_interface_req_object: i64,
    pub __isset_vms_interface_req_object: u_int8_t,
    pub vms_interface_req_mac_object: i64,
    pub __isset_vms_interface_req_mac_object: u_int8_t,
    pub vms_interface_req_name_object: i64,
    pub __isset_vms_interface_req_name_object: u_int8_t,
    pub vms_interface_stats_object: i64,
    pub __isset_vms_interface_stats_object: u_int8_t,
    pub vms_interface_table_object: i64,
    pub __isset_vms_interface_table_object: u_int8_t,
    pub vms_interface_vrf_table_object: i64,
    pub __isset_vms_interface_vrf_table_object: u_int8_t,
    pub vms_itable_object: i64,
    pub __isset_vms_itable_object: u_int8_t,
    pub vms_malloc_object: i64,
    pub __isset_vms_malloc_object: u_int8_t,
    pub vms_message_object: i64,
    pub __isset_vms_message_object: u_int8_t,
    pub vms_message_response_object: i64,
    pub __isset_vms_message_response_object: u_int8_t,
    pub vms_message_dump_object: i64,
    pub __isset_vms_message_dump_object: u_int8_t,
    pub vms_mem_stats_req_object: i64,
    pub __isset_vms_mem_stats_req_object: u_int8_t,
    pub vms_mirror_object: i64,
    pub __isset_vms_mirror_object: u_int8_t,
    pub vms_mirror_table_object: i64,
    pub __isset_vms_mirror_table_object: u_int8_t,
    pub vms_mirror_meta_object: i64,
    pub __isset_vms_mirror_meta_object: u_int8_t,
    pub vms_mtrie_object: i64,
    pub __isset_vms_mtrie_object: u_int8_t,
    pub vms_mtrie_bucket_object: i64,
    pub __isset_vms_mtrie_bucket_object: u_int8_t,
    pub vms_mtrie_stats_object: i64,
    pub __isset_vms_mtrie_stats_object: u_int8_t,
    pub vms_mtrie_table_object: i64,
    pub __isset_vms_mtrie_table_object: u_int8_t,
    pub vms_network_address_object: i64,
    pub __isset_vms_network_address_object: u_int8_t,
    pub vms_nexthop_object: i64,
    pub __isset_vms_nexthop_object: u_int8_t,
    pub vms_nexthop_component_object: i64,
    pub __isset_vms_nexthop_component_object: u_int8_t,
    pub vms_nexthop_req_list_object: i64,
    pub __isset_vms_nexthop_req_list_object: u_int8_t,
    pub vms_nexthop_req_encap_object: i64,
    pub __isset_vms_nexthop_req_encap_object: u_int8_t,
    pub vms_nexthop_req_object: i64,
    pub __isset_vms_nexthop_req_object: u_int8_t,
    pub vms_route_table_object: i64,
    pub __isset_vms_route_table_object: u_int8_t,
    pub vms_route_req_mac_object: i64,
    pub __isset_vms_route_req_mac_object: u_int8_t,
    pub vms_timer_object: i64,
    pub __isset_vms_timer_object: u_int8_t,
    pub vms_usock_object: i64,
    pub __isset_vms_usock_object: u_int8_t,
    pub vms_usock_poll_object: i64,
    pub __isset_vms_usock_poll_object: u_int8_t,
    pub vms_usock_buf_object: i64,
    pub __isset_vms_usock_buf_object: u_int8_t,
    pub vms_usock_iovec_object: i64,
    pub __isset_vms_usock_iovec_object: u_int8_t,
    pub vms_vrouter_req_object: i64,
    pub __isset_vms_vrouter_req_object: u_int8_t,
    pub vms_interface_fat_flow_config_object: i64,
    pub __isset_vms_interface_fat_flow_config_object: u_int8_t,
    pub vms_qos_map_object: i64,
    pub __isset_vms_qos_map_object: u_int8_t,
    pub vms_fc_object: i64,
    pub __isset_vms_fc_object: u_int8_t,
    pub vms_interface_mirror_meta_object: i64,
    pub __isset_vms_interface_mirror_meta_object: u_int8_t,
    pub vms_interface_req_mirror_meta_object: i64,
    pub __isset_vms_interface_req_mirror_meta_object: u_int8_t,
    pub vms_interface_bridge_lock_object: i64,
    pub __isset_vms_interface_bridge_lock_object: u_int8_t,
    pub vms_interface_queue_object: i64,
    pub __isset_vms_interface_queue_object: u_int8_t,
    pub vms_interface_req_pbb_mac_object: i64,
    pub __isset_vms_interface_req_pbb_mac_object: u_int8_t,
    pub vms_nexthop_req_bmac_object: i64,
    pub __isset_vms_nexthop_req_bmac_object: u_int8_t,
    pub vms_interface_req_bridge_id_object: i64,
    pub __isset_vms_interface_req_bridge_id_object: u_int8_t,
    pub vms_interface_fat_flow_ipv4_exclude_list_object: i64,
    pub __isset_vms_interface_fat_flow_ipv4_exclude_list_object: u_int8_t,
    pub vms_interface_fat_flow_ipv6_exclude_list_object: i64,
    pub __isset_vms_interface_fat_flow_ipv6_exclude_list_object: u_int8_t,
}
pub type vr_mem_stats_req = _vr_mem_stats_req;
extern "C" {
    pub fn vr_mem_stats_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mem_stats_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mem_stats_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mem_stats_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_mem_stats_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_mem_stats_req_process(pvr_mem_stats_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_info_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vdu_rid: i16,
    pub __isset_vdu_rid: u_int8_t,
    pub vdu_index: i16,
    pub __isset_vdu_index: u_int8_t,
    pub vdu_buff_table_id: i16,
    pub __isset_vdu_buff_table_id: u_int8_t,
    pub vdu_marker: i16,
    pub __isset_vdu_marker: u_int8_t,
    pub vdu_msginfo: i16,
    pub __isset_vdu_msginfo: u_int8_t,
    pub vdu_outbufsz: i32,
    pub __isset_vdu_outbufsz: u_int8_t,
    pub vdu_inbuf: *mut i8,
    pub vdu_inbuf_size: u_int32_t,
    pub __isset_vdu_inbuf: u_int8_t,
    pub vdu_proc_info: *mut i8,
    pub vdu_proc_info_size: u_int32_t,
    pub __isset_vdu_proc_info: u_int8_t,
}
pub type vr_info_req = _vr_info_req;
extern "C" {
    pub fn vr_info_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_info_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_info_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_info_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_info_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_info_req_process(pvr_info_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_pkt_drop_log_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vdl_rid: i16,
    pub __isset_vdl_rid: u_int8_t,
    pub vdl_core: i16,
    pub __isset_vdl_core: u_int8_t,
    pub vdl_log_idx: i16,
    pub __isset_vdl_log_idx: u_int8_t,
    pub vdl_max_num_cores: i16,
    pub __isset_vdl_max_num_cores: u_int8_t,
    pub vdl_pkt_droplog_max_bufsz: i16,
    pub __isset_vdl_pkt_droplog_max_bufsz: u_int8_t,
    pub vdl_pkt_droplog_en: i16,
    pub __isset_vdl_pkt_droplog_en: u_int8_t,
    pub vdl_pkt_droplog_sysctl_en: i16,
    pub __isset_vdl_pkt_droplog_sysctl_en: u_int8_t,
    pub vdl_pkt_droplog_arr: *mut i8,
    pub vdl_pkt_droplog_arr_size: u_int32_t,
    pub __isset_vdl_pkt_droplog_arr: u_int8_t,
}
pub type vr_pkt_drop_log_req = _vr_pkt_drop_log_req;
extern "C" {
    pub fn vr_pkt_drop_log_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_pkt_drop_log_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_pkt_drop_log_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_pkt_drop_log_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_pkt_drop_log_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_pkt_drop_log_req_process(pvr_pkt_drop_log_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_drop_stats_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub vds_rid: i16,
    pub __isset_vds_rid: u_int8_t,
    pub vds_core: i16,
    pub __isset_vds_core: u_int8_t,
    pub vds_discard: i64,
    pub __isset_vds_discard: u_int8_t,
    pub vds_pcpu_stats_failure_status: i8,
    pub __isset_vds_pcpu_stats_failure_status: u_int8_t,
    pub vds_pull: i64,
    pub __isset_vds_pull: u_int8_t,
    pub vds_invalid_if: i64,
    pub __isset_vds_invalid_if: u_int8_t,
    pub vds_invalid_arp: i64,
    pub __isset_vds_invalid_arp: u_int8_t,
    pub vds_trap_no_if: i64,
    pub __isset_vds_trap_no_if: u_int8_t,
    pub vds_nowhere_to_go: i64,
    pub __isset_vds_nowhere_to_go: u_int8_t,
    pub vds_flow_queue_limit_exceeded: i64,
    pub __isset_vds_flow_queue_limit_exceeded: u_int8_t,
    pub vds_flow_no_memory: i64,
    pub __isset_vds_flow_no_memory: u_int8_t,
    pub vds_flow_invalid_protocol: i64,
    pub __isset_vds_flow_invalid_protocol: u_int8_t,
    pub vds_flow_nat_no_rflow: i64,
    pub __isset_vds_flow_nat_no_rflow: u_int8_t,
    pub vds_flow_action_drop: i64,
    pub __isset_vds_flow_action_drop: u_int8_t,
    pub vds_flow_action_invalid: i64,
    pub __isset_vds_flow_action_invalid: u_int8_t,
    pub vds_flow_unusable: i64,
    pub __isset_vds_flow_unusable: u_int8_t,
    pub vds_flow_table_full: i64,
    pub __isset_vds_flow_table_full: u_int8_t,
    pub vds_interface_tx_discard: i64,
    pub __isset_vds_interface_tx_discard: u_int8_t,
    pub vds_interface_drop: i64,
    pub __isset_vds_interface_drop: u_int8_t,
    pub vds_duplicated: i64,
    pub __isset_vds_duplicated: u_int8_t,
    pub vds_push: i64,
    pub __isset_vds_push: u_int8_t,
    pub vds_ttl_exceeded: i64,
    pub __isset_vds_ttl_exceeded: u_int8_t,
    pub vds_invalid_nh: i64,
    pub __isset_vds_invalid_nh: u_int8_t,
    pub vds_invalid_label: i64,
    pub __isset_vds_invalid_label: u_int8_t,
    pub vds_invalid_protocol: i64,
    pub __isset_vds_invalid_protocol: u_int8_t,
    pub vds_interface_rx_discard: i64,
    pub __isset_vds_interface_rx_discard: u_int8_t,
    pub vds_invalid_mcast_source: i64,
    pub __isset_vds_invalid_mcast_source: u_int8_t,
    pub vds_head_alloc_fail: i64,
    pub __isset_vds_head_alloc_fail: u_int8_t,
    pub vds_pcow_fail: i64,
    pub __isset_vds_pcow_fail: u_int8_t,
    pub vds_mcast_df_bit: i64,
    pub __isset_vds_mcast_df_bit: u_int8_t,
    pub vds_mcast_clone_fail: i64,
    pub __isset_vds_mcast_clone_fail: u_int8_t,
    pub vds_no_memory: i64,
    pub __isset_vds_no_memory: u_int8_t,
    pub vds_rewrite_fail: i64,
    pub __isset_vds_rewrite_fail: u_int8_t,
    pub vds_misc: i64,
    pub __isset_vds_misc: u_int8_t,
    pub vds_invalid_packet: i64,
    pub __isset_vds_invalid_packet: u_int8_t,
    pub vds_cksum_err: i64,
    pub __isset_vds_cksum_err: u_int8_t,
    pub vds_no_fmd: i64,
    pub __isset_vds_no_fmd: u_int8_t,
    pub vds_cloned_original: i64,
    pub __isset_vds_cloned_original: u_int8_t,
    pub vds_invalid_vnid: i64,
    pub __isset_vds_invalid_vnid: u_int8_t,
    pub vds_frag_err: i64,
    pub __isset_vds_frag_err: u_int8_t,
    pub vds_invalid_source: i64,
    pub __isset_vds_invalid_source: u_int8_t,
    pub vds_l2_no_route: i64,
    pub __isset_vds_l2_no_route: u_int8_t,
    pub vds_fragment_queue_fail: i64,
    pub __isset_vds_fragment_queue_fail: u_int8_t,
    pub vds_vlan_fwd_tx: i64,
    pub __isset_vds_vlan_fwd_tx: u_int8_t,
    pub vds_vlan_fwd_enq: i64,
    pub __isset_vds_vlan_fwd_enq: u_int8_t,
    pub vds_drop_new_flow: i64,
    pub __isset_vds_drop_new_flow: u_int8_t,
    pub vds_flow_evict: i64,
    pub __isset_vds_flow_evict: u_int8_t,
    pub vds_trap_original: i64,
    pub __isset_vds_trap_original: u_int8_t,
    pub vds_leaf_to_leaf: i64,
    pub __isset_vds_leaf_to_leaf: u_int8_t,
    pub vds_bmac_isid_mismatch: i64,
    pub __isset_vds_bmac_isid_mismatch: u_int8_t,
    pub vds_pkt_loop: i64,
    pub __isset_vds_pkt_loop: u_int8_t,
    pub vds_no_crypt_path: i64,
    pub __isset_vds_no_crypt_path: u_int8_t,
    pub vds_invalid_hbs_pkt: i64,
    pub __isset_vds_invalid_hbs_pkt: u_int8_t,
    pub vds_no_frag_entry: i64,
    pub __isset_vds_no_frag_entry: u_int8_t,
    pub vds_icmp_error: i64,
    pub __isset_vds_icmp_error: u_int8_t,
    pub vds_clone_fail: i64,
    pub __isset_vds_clone_fail: u_int8_t,
}
pub type vr_drop_stats_req = _vr_drop_stats_req;
extern "C" {
    pub fn vr_drop_stats_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_drop_stats_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_drop_stats_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_drop_stats_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_drop_stats_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_drop_stats_req_process(pvr_drop_stats_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_qos_map_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub qmr_rid: u16,
    pub __isset_qmr_rid: u_int8_t,
    pub qmr_id: u16,
    pub __isset_qmr_id: u_int8_t,
    pub qmr_dscp: *mut i8,
    pub qmr_dscp_size: u_int32_t,
    pub __isset_qmr_dscp: u_int8_t,
    pub qmr_dscp_fc_id: *mut i8,
    pub qmr_dscp_fc_id_size: u_int32_t,
    pub __isset_qmr_dscp_fc_id: u_int8_t,
    pub qmr_mpls_qos: *mut i8,
    pub qmr_mpls_qos_size: u_int32_t,
    pub __isset_qmr_mpls_qos: u_int8_t,
    pub qmr_mpls_qos_fc_id: *mut i8,
    pub qmr_mpls_qos_fc_id_size: u_int32_t,
    pub __isset_qmr_mpls_qos_fc_id: u_int8_t,
    pub qmr_dotonep: *mut i8,
    pub qmr_dotonep_size: u_int32_t,
    pub __isset_qmr_dotonep: u_int8_t,
    pub qmr_dotonep_fc_id: *mut i8,
    pub qmr_dotonep_fc_id_size: u_int32_t,
    pub __isset_qmr_dotonep_fc_id: u_int8_t,
    pub qmr_marker: i16,
    pub __isset_qmr_marker: u_int8_t,
}
pub type vr_qos_map_req = _vr_qos_map_req;
extern "C" {
    pub fn vr_qos_map_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_qos_map_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_qos_map_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_qos_map_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_qos_map_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_qos_map_req_process(pvr_qos_map_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_fc_map_req {
    pub h_op: sandesh_op,
    pub __isset_h_op: u_int8_t,
    pub fmr_rid: u16,
    pub __isset_fmr_rid: u_int8_t,
    pub fmr_id: *mut i16,
    pub fmr_id_size: u_int32_t,
    pub __isset_fmr_id: u_int8_t,
    pub fmr_dscp: *mut i8,
    pub fmr_dscp_size: u_int32_t,
    pub __isset_fmr_dscp: u_int8_t,
    pub fmr_mpls_qos: *mut i8,
    pub fmr_mpls_qos_size: u_int32_t,
    pub __isset_fmr_mpls_qos: u_int8_t,
    pub fmr_dotonep: *mut i8,
    pub fmr_dotonep_size: u_int32_t,
    pub __isset_fmr_dotonep: u_int8_t,
    pub fmr_queue_id: *mut i8,
    pub fmr_queue_id_size: u_int32_t,
    pub __isset_fmr_queue_id: u_int8_t,
    pub fmr_marker: i16,
    pub __isset_fmr_marker: u_int8_t,
}
pub type vr_fc_map_req = _vr_fc_map_req;
extern "C" {
    pub fn vr_fc_map_req_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_fc_map_req_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_fc_map_req_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_fc_map_req_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_fc_map_req_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_fc_map_req_process(pvr_fc_map_req: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_flow_response {
    pub fresp_op: flow_op,
    pub __isset_fresp_op: u_int8_t,
    pub fresp_rid: u16,
    pub __isset_fresp_rid: u_int8_t,
    pub fresp_flags: u16,
    pub __isset_fresp_flags: u_int8_t,
    pub fresp_index: u32,
    pub __isset_fresp_index: u_int8_t,
    pub fresp_bytes: u32,
    pub __isset_fresp_bytes: u_int8_t,
    pub fresp_packets: u32,
    pub __isset_fresp_packets: u_int8_t,
    pub fresp_stats_oflow: u32,
    pub __isset_fresp_stats_oflow: u_int8_t,
    pub fresp_gen_id: i8,
    pub __isset_fresp_gen_id: u_int8_t,
}
pub type vr_flow_response = _vr_flow_response;
extern "C" {
    pub fn vr_flow_response_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_response_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_response_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_response_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_response_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_flow_response_process(pvr_flow_response: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_flow_table_data {
    pub ftable_op: flow_op,
    pub __isset_ftable_op: u_int8_t,
    pub ftable_rid: u16,
    pub __isset_ftable_rid: u_int8_t,
    pub ftable_size: u32,
    pub __isset_ftable_size: u_int8_t,
    pub ftable_dev: u16,
    pub __isset_ftable_dev: u_int8_t,
    pub ftable_file_path: *mut ::std::os::raw::c_char,
    pub __isset_ftable_file_path: u_int8_t,
    pub ftable_used_entries: u64,
    pub __isset_ftable_used_entries: u_int8_t,
    pub ftable_processed: u64,
    pub __isset_ftable_processed: u_int8_t,
    pub ftable_deleted: u64,
    pub __isset_ftable_deleted: u_int8_t,
    pub ftable_added: u64,
    pub __isset_ftable_added: u_int8_t,
    pub ftable_created: u64,
    pub __isset_ftable_created: u_int8_t,
    pub ftable_changed: u64,
    pub __isset_ftable_changed: u_int8_t,
    pub ftable_hold_oflows: u32,
    pub __isset_ftable_hold_oflows: u_int8_t,
    pub ftable_cpus: u32,
    pub __isset_ftable_cpus: u_int8_t,
    pub ftable_oflow_entries: u32,
    pub __isset_ftable_oflow_entries: u_int8_t,
    pub ftable_hold_stat: *mut u32,
    pub ftable_hold_stat_size: u_int32_t,
    pub __isset_ftable_hold_stat: u_int8_t,
    pub ftable_burst_free_tokens: u32,
    pub __isset_ftable_burst_free_tokens: u_int8_t,
    pub ftable_hold_entries: u32,
    pub __isset_ftable_hold_entries: u_int8_t,
}
pub type vr_flow_table_data = _vr_flow_table_data;
extern "C" {
    pub fn vr_flow_table_data_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_table_data_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_table_data_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_table_data_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_flow_table_data_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_flow_table_data_process(pvr_flow_table_data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_bridge_table_data {
    pub btable_op: sandesh_op,
    pub __isset_btable_op: u_int8_t,
    pub btable_rid: u16,
    pub __isset_btable_rid: u_int8_t,
    pub btable_size: u32,
    pub __isset_btable_size: u_int8_t,
    pub btable_dev: u16,
    pub __isset_btable_dev: u_int8_t,
    pub btable_file_path: *mut ::std::os::raw::c_char,
    pub __isset_btable_file_path: u_int8_t,
}
pub type vr_bridge_table_data = _vr_bridge_table_data;
extern "C" {
    pub fn vr_bridge_table_data_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_bridge_table_data_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_bridge_table_data_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_bridge_table_data_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_bridge_table_data_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_bridge_table_data_process(
        pvr_bridge_table_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vr_hugepage_config {
    pub vhp_op: sandesh_op,
    pub __isset_vhp_op: u_int8_t,
    pub vhp_mem: *mut u64,
    pub vhp_mem_size: u_int32_t,
    pub __isset_vhp_mem: u_int8_t,
    pub vhp_psize: *mut u32,
    pub vhp_psize_size: u_int32_t,
    pub __isset_vhp_psize: u_int8_t,
    pub vhp_resp: u32,
    pub __isset_vhp_resp: u_int8_t,
    pub vhp_mem_sz: *mut u32,
    pub vhp_mem_sz_size: u_int32_t,
    pub __isset_vhp_mem_sz: u_int8_t,
    pub vhp_file_paths: *mut i8,
    pub vhp_file_paths_size: u_int32_t,
    pub __isset_vhp_file_paths: u_int8_t,
    pub vhp_file_path_sz: *mut u32,
    pub vhp_file_path_sz_size: u_int32_t,
    pub __isset_vhp_file_path_sz: u_int8_t,
}
pub type vr_hugepage_config = _vr_hugepage_config;
extern "C" {
    pub fn vr_hugepage_config_write(
        wsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_hugepage_config_write_binary_to_buffer(
        wsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_hugepage_config_read(
        rsandesh: *mut ::std::os::raw::c_void,
        protocol: *mut ThriftProtocol,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_hugepage_config_read_binary_from_buffer(
        rsandesh: *mut ::std::os::raw::c_void,
        buf: *mut u8,
        buf_len: usize,
        error: *mut ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    pub fn vr_hugepage_config_free(fsandesh: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_hugepage_config_process(pvr_hugepage_config: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vr_find_sandesh_info(
        sname: *const ::std::os::raw::c_char,
    ) -> *mut sandesh_info_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
